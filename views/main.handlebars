<div id="sceneContainer">
    <div id="cesiumContainer" class="fullSize"></div>
    <div id="panorama">
        <div id="pano-controls">
            <div class="pano-ctrl" id="pano-close">&#10006;</div>
        </div>
    </div>
    <div id="infobox">
        <div style="display: flex; flex-direction: row-reverse;">
            <div id="infoclose">&#10006;</div>
        </div>
        <div id="infoarea">
            <h3> About </h3>
            <p> Wherebikes is a community based bicycle related data collection and web mapping platform developed together by Bikes in Yangon and Yangon Binärhaus in late 2017. </p>
            <h3> Open Bicycle Data API </h3>
            <p> Data collected by community volunteers on this platform is provided open and free to general public. We have created API endpoints for retrieving data being displayed on this map in both JSON and GeoJSON formats. </p>
            <p> JSON formatted data can be retrieved at <code>/api/data</code> path and GeoJSON formatted data can be retrieved at <code>/api/geojson</code> endpoint. Data properties in Burmese language is already converted to Unicode text and display ready.</p>
            <p> Although we do not limit the access to data, we strongly encourage you to be responsible with data usage and to reach out to B_in_Ygn and/or to <a href="mailto:nyinyinyanlin.mm@gmail.com?subject=Wherebikes Data">Nyi Nyi Nyan Lin</a>, the developer of this platform, so that we could connect and possibly see opportunities to collaborate. Please make sure to follow the ODbL v1.0 License as stated below when using the dataset for your own purpose and we would appreciate if you would cite/reference to this platform in any work based on this dataset.</p> 
            <h3> License </h3>
            <strong> This Wherebikes dataset is made available under the Open Database License: <a href="http://opendatacommons.org/licenses/dbcl/1.0/">http://opendatacommons.org/licenses/dbcl/1.0/</a>. Any rights in individual contents of the database are licensed under the Database Contents License: <a href="http://opendatacommons.org/licenses/dbcl/1.0/">http://opendatacommons.org/licenses/dbcl/1.0/</a></strong>
            <h3> Prospective Contributors </h3>
            <p> This platform and dataset would not have developed without the support and contributions of our community and volunteers. If you are interested in contributing more to this project and/or adding more data to the dataset, please contact to B_in_Ygn or <a href="mailto:nyinyinyanlin.mm@gmail.com?subject=Wherebikes Data">Nyi Nyi Nyan Lin</a>.</p>
        </div>
    </div>
    <div id="creditbox">
        <div style="display: flex; flex-direction: row-reverse;">
            <div id="creditclose">&#10006;</div>
        </div>
        <div id="creditarea">
            <h3> About </h3>
            <p> Wherebikes is a community based bicycle related data collection and web mapping platform developed together by Bikes in Yangon and Yangon Binärhaus in late 2017. </p>
            <h3> Open Bicycle Data API </h3>
            <p> Data collected by community volunteers on this platform is provided open and free to general public. We have created API endpoints for retrieving data being displayed on this map in both JSON and GeoJSON formats. </p>
            <p> JSON formatted data can be retrieved at <code>/api/data</code> path and GeoJSON formatted data can be retrieved at <code>/api/geojson</code> endpoint. Data properties in Burmese language is already converted to Unicode text and display ready.</p>
            <p> Although we do not limit the access to data, we strongly encourage you to be responsible with data usage and to reach out to B_in_Ygn and/or to <a href="mailto:nyinyinyanlin.mm@gmail.com?subject=Wherebikes Data">Nyi Nyi Nyan Lin</a>, the developer of this platform, so that we could connect and possibly see opportunities to collaborate. Please make sure to follow the ODbL v1.0 License as stated below when using the dataset for your own purpose and we would appreciate if you would cite/reference to this platform in any work based on this dataset.</p> 
            <h3> License </h3>
            <strong> This Wherebikes dataset is made available under the Open Database License: <a href="http://opendatacommons.org/licenses/dbcl/1.0/">http://opendatacommons.org/licenses/dbcl/1.0/</a>. Any rights in individual contents of the database are licensed under the Database Contents License: <a href="http://opendatacommons.org/licenses/dbcl/1.0/">http://opendatacommons.org/licenses/dbcl/1.0/</a></strong>
            <h3> Prospective Contributors </h3>
            <p> This platform and dataset would not have developed without the support and contributions of our community and volunteers. If you are interested in contributing more to this project and/or adding more data to the dataset, please contact to B_in_Ygn or <a href="mailto:nyinyinyanlin.mm@gmail.com?subject=Wherebikes Data">Nyi Nyi Nyan Lin</a>.</p>
        </div>
    </div>
    <div id="welcomebox">
        <div style="display: flex; flex-direction: row-reverse;">
            <div id="welcomeclose">&#10006;</div>
        </div>
        <div id="welcomearea">
            <h3> About </h3>
            <p> Wherebikes is a community based bicycle related data collection and web mapping platform developed together by Bikes in Yangon and Yangon Binärhaus in late 2017. </p>
            <h3> Open Bicycle Data API </h3>
            <p> Data collected by community volunteers on this platform is provided open and free to general public. We have created API endpoints for retrieving data being displayed on this map in both JSON and GeoJSON formats. </p>
            <p> JSON formatted data can be retrieved at <code>/api/data</code> path and GeoJSON formatted data can be retrieved at <code>/api/geojson</code> endpoint. Data properties in Burmese language is already converted to Unicode text and display ready.</p>
            <p> Although we do not limit the access to data, we strongly encourage you to be responsible with data usage and to reach out to B_in_Ygn and/or to <a href="mailto:nyinyinyanlin.mm@gmail.com?subject=Wherebikes Data">Nyi Nyi Nyan Lin</a>, the developer of this platform, so that we could connect and possibly see opportunities to collaborate. Please make sure to follow the ODbL v1.0 License as stated below when using the dataset for your own purpose and we would appreciate if you would cite/reference to this platform in any work based on this dataset.</p> 
            <h3> License </h3>
            <strong> This Wherebikes dataset is made available under the Open Database License: <a href="http://opendatacommons.org/licenses/dbcl/1.0/">http://opendatacommons.org/licenses/dbcl/1.0/</a>. Any rights in individual contents of the database are licensed under the Database Contents License: <a href="http://opendatacommons.org/licenses/dbcl/1.0/">http://opendatacommons.org/licenses/dbcl/1.0/</a></strong>
            <h3> Prospective Contributors </h3>
            <p> This platform and dataset would not have developed without the support and contributions of our community and volunteers. If you are interested in contributing more to this project and/or adding more data to the dataset, please contact to B_in_Ygn or <a href="mailto:nyinyinyanlin.mm@gmail.com?subject=Wherebikes Data">Nyi Nyi Nyan Lin</a>.</p>
        </div>
    </div>
</div>
<script>
    function compileBuildingInfo(info) {
        let infobox = `
        <style>
            .buildinginfotable tbody tr td {
                font-size: small;
                padding: 0px 5px 0px 5px;
            }
            .buildinginfotable tbody tr td:nth-child(odd) {
                text-align: end;
                font-weight: bold;
            }
            .buildinginfotable tbody tr td:nth-child(even) {
                font-style: italic;
            }
            .description-text {
                font-style: italic;
                text-align: justify;
            }
            .monumentimage {
                width: 80%;
                height: auto;
            }
            .imagecontainer {
                width: 100%;
                height: fit-content;
                text-align: center;
            }
        </style>`;
        if (info.monument_name != "null" && info.monument_name != "Unknown") {
            infobox += `
            <h2>${info.monument_name}</h2>
            `
        } else if (info.plate_id != "null") {
            infobox += `
            <h2>${info.plate_id}</h2>
            `
        }
        infobox += "<hr>"
        infobox += "<table class='buildinginfotable'>"
        if (info.monument_name != "null") {
            infobox += `            
            <tr>
                <td>Name: </td><td>${info.monument_name}</td>
            </tr>`
        }
        if (info.plate_id != "null") {
            infobox += `            
            <tr>
                <td>Plate ID: </td><td>${info.plate_id}</td>
            </tr>`
        }
        if (info.monument_type != "null") {
            infobox += `            
            <tr>
                <td>Type: </td><td>${info.monument_type}</td>
            </tr>`
        }
        if (info.era != "null") {
            infobox += `            
            <tr>
                <td>Era: </td><td>${info.era}</td>
            </tr>`
        }
        if (info.donor != "null") {
            infobox += `            
            <tr>
                <td>Donor: </td><td>${info.donor}</td>
            </tr>`
        }
        infobox += "</table>"
        if (info.description != "null") {
            infobox += `<hr><h3>Description</h3><p class="description-text">${info.description}</p>`
        }
        if (info.image != "null") {
            infobox += `</br><div class="imagecontainer"><img class="monumentimage" src="/images/monuments/${info.image}"/></div>`
        }
        return infobox
        /*return `
        <p>Plate ID: ${info.plate_id}</p>
        <p>Name: ${info.monument_name}</p>
        <p>Type: ${info.monument_type}</p>
        <p>Era: ${info.era}</p>
        <p>Donor: ${info.donor}</p>
        <p>Description: ${info.description}</p>
        `*/
    }
</script>
<script>
    function popup(link) {
        event.preventDefault();
        let infobox = document.getElementById("infobox")
        if (link == "info") {
            infobox.style.visibility = "visible";
            document.getElementById('infoclose').addEventListener('click', function(e) {
                infobox.style.visibility = "hidden";
            })
        } else if (link == "credits") {
            infobox.style.visibility = "visible";
            document.getElementById('infoclose').addEventListener('click', function(e) {
                infobox.style.visibility = "hidden";
            })
        }
    }
</script>
<script type="module">
    Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIyMTEzNzA2My04MWQ2LTQwNTAtOWZiNy0xNGUyN2I3YTQwMzAiLCJpZCI6NDA5OTIsImlhdCI6MTYwOTU3OTcxN30.w8w4h1WMspl8REKKngBHdBqafJ1M5_lY3iCTRoziEn8';

    let collections = {
        buildings: undefined,
        watersheds: undefined,
        streams: undefined,
        zones: undefined,
        photospheres: undefined,
        pois: undefined
    }

    var extent = Cesium.Rectangle.fromDegrees(95.1492,21.65,95.15,21.6545);

    Cesium.Camera.DEFAULT_VIEW_RECTANGLE = extent;
    Cesium.Camera.DEFAULT_VIEW_FACTOR = 0;

    // Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.
    const viewer = new Cesium.Viewer('cesiumContainer', {
        timeline: false,
        animation: false,
        geocoder: false,
        sceneModePicker: false,
        baseLayerPicker: false,
        requestRenderMode: true,
        maximumRenderTimeChange: Infinity,
    });
    const scene = viewer.scene;
    viewer.scene.debugShowFramesPerSecond = true;
    viewer.scene.globe.maximumScreenSpaceError = 20;
    viewer.scene.globe.tileCacheSize = 2000;
    scene.globe.depthTestAgainstTerrain = false;
    
    const toolbar = document.querySelector("div.cesium-viewer-toolbar");
    const modeButton = document.querySelector("span.cesium-sceneModePicker-wrapper");
    const displaySelector = document.createElement("select");
    displaySelector.id = "displaySelector"
    let displayData = [
        {value: "none", text: "None"},
        {value: "buildings", text: "Buildings"},
        {value: "hydrology", text: "Hydrology"},
        {value: "photospheres", text: "Photo Spheres"},
        //{value: "zones", text: "Zones"},
        //{value: "pois", text: "Places of Interest"},
    ]
    for (let i = 0; i < displayData.length; i++) {
        var option = document.createElement("option")
        option.value = displayData[i]["value"]
        option.text = displayData[i]["text"]
        if (i == 0) {
            option.defaultSelected = true
        }
        displaySelector.appendChild(option)
    }
    displaySelector.classList.add("cesium-menu", "cesium-toolbar-menu");
    displaySelector.addEventListener("change",dataChange)
    toolbar.insertBefore(displaySelector, modeButton);

    let handler;
    let lastPickedObject;
    let lastSelectedEntity;

    if (!scene.pickPositionSupported) {
        window.alert("This browser does not support pickPosition.");
    }

    // viewer.scene.setTerrain(
    //     new Cesium.Terrain(
    //         Cesium.CesiumTerrainProvider.fromIonAssetId(2479123),
    //     ),
    // );

    // Fly the camera to San Francisco at the given longitude, latitude, and height.
    viewer.camera.flyTo({
      destination: Cesium.Cartesian3.fromDegrees(95.14971010, 21.65217314, 1000),
      orientation: {
        heading: Cesium.Math.toRadians(0.0),
        pitch: Cesium.Math.toRadians(-90.0),
      }
    });

    try {
        const tileset2 = viewer.scene.primitives.add(
            await Cesium.Cesium3DTileset.fromIonAssetId(2518769, {
                enableCollision: false,
            }),
        );
    } catch (error) {
        console.log(`Failed to load tileset: ${error}`);        
    }

    try {
        Cesium.GeoJsonDataSource.clampToGround = true;
        Cesium.GeoJsonDataSource.ClassificationType = Cesium.ClassificationType.CESIUM_3D_TILE;
        Cesium.GeoJsonDataSource.load("/geojson/aung_nan_watershed.geojson").then((dataSource) => {
            viewer.dataSources.add(dataSource);
            dataSource.entities.values.forEach((entity) => {
                entity.type = "watershed"
                entity.polygon.material = Cesium.Color.fromRandom({
                    alpha: 0.5
                })
                entity.allowPicking = false
                entity.polygon.classificationType = Cesium.ClassificationType.CESIUM_3D_TILE;
            })
            dataSource.entities.show = false
            collections.watersheds = dataSource.entities
        })
    } catch (error) {
        console.log(`Failed to load datasource: ${error}`);        
    }

    fetch("/geojson/panos.geojson").then(res => res.json()).then(out => {
        const photoSphereEntities = viewer.entities.add(new Cesium.Entity());
        out.features.forEach((feature) => {
            const sphere = viewer.entities.add({
                parent: photoSphereEntities,
                type: "photosphere",
                src: "/images/panos/" + feature.properties.Name,
                name: feature.properties.Name,
                position: Cesium.Cartesian3.fromDegrees(feature.properties.Lon, feature.properties.Lat, feature.properties.Altitude - 73),
                ellipsoid: {
                    radii: new Cesium.Cartesian3(2.5, 2.5, 2.5),
                    material: new Cesium.ImageMaterialProperty({
                        image: "/images/panos/thumb_" + feature.properties.Name,
                    })
                },
            })
        })
        photoSphereEntities.show = false
        collections.photospheres = photoSphereEntities
    }).catch(err => { throw err });

    try {
        var streamsDs = Cesium.GeoJsonDataSource.load("/geojson/aung_nan_stream_order_simplified.geojson").then((dataSource) => {
            viewer.dataSources.add(dataSource);
            var entities = dataSource.entities.values;
            entities.forEach((entity) => {
                var positions = entity.polyline.positions.getValue();
                entity.type = "stream"
                entity.polyline.allowPicking = false
                entity.polyline.material = entity.properties.grid_code == 1 ? Cesium.Color.BLUE : entity.properties.grid_code == 2 ? Cesium.Color.MAGENTA : entity.properties.grid_code == 3 ? Cesium.Color.YELLOW : entity.properties.grid_code == 4 ? Cesium.Color.ORANGE : Cesium.Color.RED
            })
            dataSource.entities.show = false
            collections.streams = dataSource.entities
        })  
    } catch (error) {
        console.log(`Failed to load datasource: ${error}`);        
    }
    Cesium.GeoJsonDataSource.clampToGround = false;
    Cesium.GeoJsonDataSource.load("/geojson").then((dataSource) => {
        
        viewer.dataSources.add(dataSource);
         var buildings = dataSource.entities;
    
         var buildingsEntities = dataSource.entities.values;
         for (var i = 0; i < buildingsEntities.length;i++) {
             var entity = buildingsEntities[i];
             if(Cesium.defined(entity.polygon)) {
                 entity.name = "Building: " + entity.properties.plate_id.toString().replace("_"," ")
                 entity.type = "building"
                 entity.description = compileBuildingInfo({
                    plate_id: entity.properties.plate_id.toString().replace("_"," "),
                    monument_type: entity.properties.type.toString(),
                    monument_name: entity.properties.monument_name.toString(),
                    era: entity.properties.era.toString(),
                    donor: entity.properties.donor.toString(),
                    description: entity.properties.description.toString(),
                    image: entity.properties.image.toString()
                 })
                 entity.defaultColor = Cesium.Color.PURPLE.withAlpha(0.08)
                 entity.hoverColor = Cesium.Color.BLUE.withAlpha(0.1)
                 entity.clickColor = Cesium.Color.GREEN.withAlpha(0.1)
                 entity.defaultHeight = (entity.properties.dsm_height - 85)/1.5
                 entity.hoverHeight = entity.properties.dsm_height - 85
                 entity.polygon.outlineColor = entity.defaultColor
                 entity.polygon.material = entity.defaultColor
                 entity.polygon.extrudedHeight = entity.defaultHeight 
                 entity.polygon.heightReference = Cesium.HeightReference.NONE
                 entity.polygon.height = 0
                 entity.polygon.extrudedHeightReference = Cesium.HeightReference.NONE
                 entity.polygon.classificationType = Cesium.ClassificationType.TERRAIN
             };
         }

        dataSource.entities.show = false
        collections.buildings = dataSource.entities
     });

    const debounce = (callback, wait) => {
    let timeoutId = null;
    return (...args) => {
        window.clearTimeout(timeoutId);
        timeoutId = window.setTimeout(() => {
        callback(...args);
        }, wait);
    };
    }

    viewer.selectedEntityChanged.addEventListener(function(selectedEntity) {
        if (Cesium.defined(selectedEntity)) {
            if (Cesium.defined(selectedEntity)) {
                if (selectedEntity.type == "photosphere") {
                    let panoViewer = document.getElementById("panorama")
                    pannellum.viewer('panorama', {
                        "type": "equirectangular",
                        "panorama": selectedEntity.src,
                        "compass": true,
                        "autoLoad": true
                    });
                    panoViewer.style.visibility = "visible";
                    document.getElementById('pano-close').addEventListener('click', function(e) {
                        panoViewer.style.visibility = "hidden";
                    });
                } else if (selectedEntity.type == "building123") {
                    let infobox = document.getElementById("infobox")
                    infobox.style.visibility = "visible";
                    document.getElementById('infoclose').addEventListener('click', function(e) {
                        infobox.style.visibility = "hidden";
                    })
                }
            } else {
                console.log('Unknown entity selected.');
            }
        } else {
            if(Cesium.defined(lastSelectedEntity)) {

            }
            console.log('Deselected.');
        }
    });

    handler = new Cesium.ScreenSpaceEventHandler(scene.canvas);
    handler.setInputAction(function (movement) {
        let pickedObject = scene.pick(movement.endPosition);
        if (Cesium.defined(pickedObject) && Cesium.defined(pickedObject.id)){
            if (pickedObject.id.type !== "watershed" && pickedObject.id.type !== "stream" && pickedObject.id.type !== "photosphere") {
                if (Cesium.defined(lastPickedObject) && pickedObject.id !== lastPickedObject.id) {
                    lastPickedObject.id.polygon.material = lastPickedObject.id.defaultColor
                    lastPickedObject.id.polygon.outlineColor = lastPickedObject.id.defaultColor
                    lastPickedObject.id.polygon.extrudedHeight = lastPickedObject.id.defaultHeight
                }
                pickedObject.id.polygon.material = pickedObject.id.hoverColor
                pickedObject.id.polygon.outlineColor = pickedObject.id.hoverColor
                pickedObject.id.polygon.extrudedHeight = pickedObject.id.hoverHeight
                lastPickedObject = pickedObject
                scene.requestRender();
            }
        } else {
            if (Cesium.defined(lastPickedObject)) {
                lastPickedObject.id.polygon.material = lastPickedObject.id.defaultColor
                lastPickedObject.id.polygon.outlineColor = lastPickedObject.id.defaultColor
                lastPickedObject.id.polygon.extrudedHeight = lastPickedObject.id.defaultHeight
                lastPickedObject = undefined
                scene.requestRender();
            }
        }
    }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);

    function showData(collection,target) {
        if (target[0] == "none") {
            Object.keys(collection).forEach(function(key,index) {
                if (collection[key]) {
                    collection[key].show = false
                }
            });            
        } else {
            Object.keys(collection).forEach(function(key,index) {
                if (collection[key]) {
                    if (target.includes(key)) {
                        collection[key].show = true
                    } else {
                        collection[key].show = false
                    }
                }
            });            
        }
        scene.requestRender();
    }

    function dataChange(e){
        switch (e.target.value) {
            case "buildings":
            case "zones":
            case "photospheres":
            case "pois":
                showData(collections,[e.target.value])
                break;
            case "hydrology":
                showData(collections,["watersheds","streams"])
                break;
            default:
                showData(collections,["none"])
        }
    }
</script>